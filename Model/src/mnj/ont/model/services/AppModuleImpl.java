package mnj.ont.model.services;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.util.HashMap;

import java.util.Map;
import java.util.StringTokenizer;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.print.attribute.standard.Severity;

import javax.servlet.http.HttpSession;

import mnj.ont.model.bean.StnBean;

import mnj.ont.model.services.common.AppModule;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 30 15:37:04 BDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for HeaderVO1.
     * @return HeaderVO1
     */
    public ViewObjectImpl getHeaderVO1() {
        return (ViewObjectImpl)findViewObject("HeaderVO1");
    }

    /**
     * Container's getter for CustMnjOntSoObinSizlineLINESView1.
     * @return CustMnjOntSoObinSizlineLINESView1
     */
    public ViewObjectImpl getCustMnjOntSoObinSizlineLINESView1() {
        return (ViewObjectImpl)findViewObject("CustMnjOntSoObinSizlineLINESView1");
    }

    /**
     * Container's getter for CustMnjOntSoObinslineDetailView1.
     * @return CustMnjOntSoObinslineDetailView1
     */
    public ViewObjectImpl getCustMnjOntSoObinslineDetailView1() {
        return (ViewObjectImpl)findViewObject("CustMnjOntSoObinslineDetailView1");
    }

    /**
     * Container's getter for HeaderLineVL1.
     * @return HeaderLineVL1
     */
    public ViewLinkImpl getHeaderLineVL1() {
        return (ViewLinkImpl)findViewLink("HeaderLineVL1");
    }

    /**
     * Container's getter for CustMnjOntSoObinslineFkLink1.
     * @return CustMnjOntSoObinslineFkLink1
     */
    public ViewLinkImpl getCustMnjOntSoObinslineFkLink1() {
        return (ViewLinkImpl)findViewLink("CustMnjOntSoObinslineFkLink1");
    }

    public String callSplitSizes() {

        String status = null;
        String stmt =
            "BEGIN  :1 := mnj_ont_sizewise_upload_pkg.upload_bpo_sizes; end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.execute();
            status = cs.getString(1);
            cs.close();
        } catch (Exception e) {
            status = e.getMessage();

        }

        return status;

    }

    public String uploadDCPOs() {

        String status = null;
        String stmt =
            "BEGIN :1 := mnj_ont_sizewise_upload_pkg.upload_dcpo_sizes; end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.execute();
            status = cs.getString(1);
            cs.close();
        } catch (Exception e) {
            status = e.getMessage();

        }

        return status;

    }


    /**
     * Container's getter for MnjOntSizewiseInterfaceHView1.
     * @return MnjOntSizewiseInterfaceHView1
     */
    public ViewObjectImpl getMnjOntSizewiseInterfaceHView1() {
        return (ViewObjectImpl)findViewObject("MnjOntSizewiseInterfaceHView1");
    }

    /**
     * Container's getter for MnjOntSizewiseInterfaceLView1.
     * @return MnjOntSizewiseInterfaceLView1
     */
    public ViewObjectImpl getMnjOntSizewiseInterfaceLView1() {
        return (ViewObjectImpl)findViewObject("MnjOntSizewiseInterfaceLView1");
    }

    /**
     * Container's getter for MnjOntSizewiseInterLFkLink1.
     * @return MnjOntSizewiseInterLFkLink1
     */
    public ViewLinkImpl getMnjOntSizewiseInterLFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjOntSizewiseInterLFkLink1");
    }


    public String callMatrix() {

        ViewObject vo = getHeaderVO1();
        
        Map sessionScope = ADFContext.getCurrent().getSessionScope();   
        String userId = (String)sessionScope.get("userId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");

        String headerId =
            vo.getCurrentRow().getAttribute("HeaderId").toString();

        System.out.println("Header id -->" + headerId);
        String status = null;
        String stmt = "BEGIN  :1 := mnj_ont_sizewise_matrix_report(:2, :3, :4, :5, :6); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.setString(2, headerId);
            cs.setString(3, userId);
            cs.setString(4, respId);
            cs.setString(5, respAppl);
            cs.setInt(6,1 );
            cs.execute();
            status = cs.getString(1);
            cs.close();
        } catch (Exception e) {
            status = e.getMessage();

        }
        System.out.println("User Id matrix-------->"+userId);
        return status;

    }


    public void lineValidation() {

      
        ViewObject vo = getHeaderVO1();
     
        double orderQty = 0.0;     
        String headerId = vo.getCurrentRow().getAttribute("OrderedQuantity").toString();
        String stnNo =  vo.getCurrentRow().getAttribute("OrderedQuantity").toString();
        try {
            orderQty =
                    Double.parseDouble(vo.getCurrentRow().getAttribute("OrderedQuantity").toString());
        } catch (Exception e) {
            orderQty=0;
        }
        String status1 = validateLinesTotal(orderQty, "BPO");
        if(!status1.equalsIgnoreCase("OK")){
                displayValidationMessage(status1);        
        }
//        String status2 = validateLinesTotal(orderQty, "DCPO");
//        
//        if(!status2.equalsIgnoreCase("OK")){
//            displayValidationMessage(status2);                                    
//        }
//&& status2.equalsIgnoreCase("OK")
        if(status1.equalsIgnoreCase("OK") ){
            
            getDBTransaction().commit();
            FacesMessage fm = new FacesMessage("Record Saved Successfully");
            fm.setSeverity(FacesMessage.SEVERITY_INFO);        
            FacesContext context = FacesContext.getCurrentInstance();
            context.addMessage(null, fm);
        }    


    }
    
    public void displayValidationMessage(String message){
        
        FacesMessage fm = new FacesMessage(message);
        fm.setSeverity(FacesMessage.SEVERITY_ERROR);        
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, fm);
    }

    public String validateLinesTotal(double orderQty, String Type) {


        ViewObject linesVO = getCustMnjOntSoObinSizlineLINESView1();
        ViewObject detailsVO = getCustMnjOntSoObinslineDetailView1();
        linesVO.setWhereClause(null);
        if (Type.equalsIgnoreCase("BPO")) {
            linesVO.setWhereClause("DCPO_NO='BPO Line'");
            //linesVO.executeQuery();
        } else {
            linesVO.setWhereClause("NVL(DCPO_NO,'XYZ')<> 'BPO Line'");
            //linesVO.executeQuery();
        }
        RowSetIterator it = linesVO.createRowSetIterator("line");
        System.out.println("Query----->"+linesVO.getQuery());

        double inseamQty = 0, totalLines = 0, qty=0, totalDet=0;
        String status = null;
        String lineId = null;

        while (it.hasNext()) {
        System.out.println("Loop-->");
         Row lineRow = it.next();   
            try {
                inseamQty =Double.parseDouble(lineRow.getAttribute("InseamQty").toString()); 
            } catch (Exception e) {
                inseamQty=0;
            }
            totalLines += inseamQty;

            lineId =lineRow.getAttribute("SoObinslineId").toString();
            detailsVO.setWhereClause("SO_OBINSLINE_ID=" + lineId);
           // detailsVO.executeQuery();
            RowSetIterator detIt = detailsVO.createRowSetIterator("detIt");
            
            totalDet = 0;
            
            while (detIt.hasNext()) {
                Row detRow = detIt.next();
                try {
                    qty =Double.parseDouble(detRow.getAttribute("SizeQty").toString()); 
                } catch (Exception e) {
                    qty=0;
                }    
                totalDet+=qty;
                
            } //innner while loop
            detIt.closeRowSetIterator();

            if(totalDet > inseamQty ){
                status = "BPO/DCPO Quantity should be equal to size total Qty.";
                it.closeRowSetIterator();
                return status;
                
            }

          


        } //end of while loop

        it.closeRowSetIterator();
        
        System.out.println("Total value--->"+totalLines);
        
        if (totalLines > orderQty) {
            if (Type.equalsIgnoreCase("BPO"))
                status ="BPO line qty should not be greater than Order Total Qty.";
            else
                status = "DCPO qty should not be greater than Order Total Qty.";
        } else {
            status = "OK";
        }

        return status;

    }
    
    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {
      
        
    System.out.println("User Id -------->"+userId);
        if (userId != null) {
          
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            userSession.setAttribute("userId", userId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respId", respId);
            userSession.setAttribute("respAppl", respAppl);
        }
    }


    /**
     * Container's getter for TestViewObject1.
     * @return TestViewObject1
     */
    public ViewObjectImpl getTestViewObject1() {
        return (ViewObjectImpl)findViewObject("TestViewObject1");
    }


    /**
     * Container's getter for CustMnjOntSizUploadTempView1.
     * @return CustMnjOntSizUploadTempView1
     */
    public ViewObjectImpl getCustMnjOntSizUploadTempView1() {
        return (ViewObjectImpl)findViewObject("CustMnjOntSizUploadTempView1");
    }
}
